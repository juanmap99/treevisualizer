import random
import sys

class TreapNode():
    def __init__(self, key):
        self.key = key
        self.priority = random.random()
        self.left = None
        self.right = None
        self.size = 1
        self.cnt = 1
      
    def calc_size(self, node):
        return node.left_size() + node.right_size() + node.cnt

    def left_size(self):
        return 0 if self.left is None else self.left.size

    def right_size(self):
        return 0 if self.right is None else self.right.size

class Treap():
    def __init__(self):
        self.root = None

    def _insert(self, node, key):
        if node is None:
            node = TreapNode(key)
            return node
        node.size += 1
        if key < node.key:
            node.left = self._insert(node.left, key)
            if node.left.priority > node.priority:
                node = self.rightRotate(node)
        elif key > node.key:
            node.right = self._insert(node.right, key)
            if node.right.priority > node.priority:
                node = self.leftRotate(node)

        return node

    def insert(self, key):
        self.root = self._insert(self.root,key)

    def leftRotate(self, nodoRotar):
        hijoDerecho = nodoRotar.right
        huerfanoParcial = hijoDerecho.left
        hijoDerecho.left = nodoRotar
        nodoRotar.right = huerfanoParcial
        nodoRotar.size = nodoRotar.calc_size(nodoRotar)
        hijoDerecho.size = hijoDerecho.calc_size(hijoDerecho)
        return hijoDerecho

    def rightRotate(self, nodoRotar):
        hijoIzquierdo = nodoRotar.left
        huerfanoParcial = hijoIzquierdo.right
        hijoIzquierdo.right = nodoRotar
        nodoRotar.left = huerfanoParcial
        nodoRotar.size = nodoRotar.calc_size(nodoRotar)
        hijoIzquierdo.size = hijoIzquierdo.calc_size(hijoIzquierdo)
        return hijoIzquierdo
      
    def _search(self, node, key):
        if node == None:
            return None
        if node.key == key:
            return node
        if key < node.key:
            return self._search(node.left, key)
        else:
            return self._search(node.right, key)

    def search(self, key):
        return self._search(self.root, key)

    def _delete(self, node, key):
        if node is None:
            return False
        if node.key == key:
            if node.left is None and node.right is None:
                return None
            elif node.left is None:
                return node.right
            elif node.right is None:
                return node.left
            else:
                if node.left.priority < node.right.priority:
                    node = self.leftRotate()
                    node.left = self._delete(node.left, key)
                else:
                    node = self.rightRotate()
                    node.right = self._delete(node.right, key)
        elif key < node.key:
            node.left = self._delete(node.left, key)
        else:
            node.right = self._delete(node.right, key)
        node.size = node.left_size() + node.right_size() + node.cnt
        return node

    def delete(self, key):
        if self.search(key) is None: return False
        self.root = self._delete(self.root, key)
        return True

    def size(self):
        return 0 if self.root is None else self.root.size

    def minValueNode(self, node):
        current = node

        while (current.left is not None):
            current = current.left

        return current

    def maxValueNode(self, node):
        current = node

        while (current.right is not None):
            current = current.right

        return current

    def getMax(self):
        return self.maxValueNode(self.root).key

    def getMin(self):
        return self.minValueNode(self.root).key

    def __print_helper(self, node, indent, last):
        if node:
            sys.stdout.write(indent)
            if last:
                sys.stdout.write("R----")
                indent += "     "
            else:
                sys.stdout.write("L----")
                indent += "|    "

            print(node.key)
            if (node.left):
                self.__print_helper(node.left, indent, False)
            if (node.right):
                self.__print_helper(node.right, indent, True)

    def print_tree(self):
        self.__print_helper(self.root, "", True)