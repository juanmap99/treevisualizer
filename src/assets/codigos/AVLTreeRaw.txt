import sys


class TreeNode(object):
    def __init__(self, key):
        self.key = key
        self.left = None
        self.right = None
        self.height = 1


class AVLTree(object):

    def insert_node(self, root, key):

        if not root:
            return TreeNode(key)
        elif key < root.key:
            root.left = self.insert_node(root.left, key)
        else:
            root.right = self.insert_node(root.right, key)

        root.height = 1 + max(self.getHeight(root.left),
                              self.getHeight(root.right))

        return self.balancePostAdd(root,key)

    def balancePostAdd(self,root,key):
        balanceFactor = self.getBalance(root)

        if balanceFactor > 1:
            if key < root.left.key:
                return self.rightRotate(root)
            else:
                root.left = self.leftRotate(root.left)
                return self.rightRotate(root)

        if balanceFactor < -1:
            if key > root.right.key:
                return self.leftRotate(root)
            else:
                root.right = self.rightRotate(root.right)
                return self.leftRotate(root)

        return root

    def delete_node(self, root, key):
        if not root:
            return root
        elif key < root.key:
            root.left = self.delete_node(root.left, key)
        elif key > root.key:
            root.right = self.delete_node(root.right, key)
        else:
            if root.left is None:
                temp = root.right
                root = None
                return temp
            elif root.right is None:
                temp = root.left
                root = None
                return temp
            temp = self.minValueNode(root.right)
            root.key = temp.key
            root.right = self.delete_node(root.right,
                                          temp.key)
        if root is None:
            return root

        root.height = 1 + max(self.getHeight(root.left),
                              self.getHeight(root.right))

        return self.balancePostDelete(root)

    def balancePostDelete(self,root):
        balanceFactor = self.getBalance(root)

        if balanceFactor > 1:
            if self.getBalance(root.left) >= 0:
                return self.rightRotate(root)
            else:
                root.left = self.leftRotate(root.left)
                return self.rightRotate(root)
        if balanceFactor < -1:
            if self.getBalance(root.right) <= 0:
                return self.leftRotate(root)
            else:
                root.right = self.rightRotate(root.right)
                return self.leftRotate(root)
        return root

    def leftRotate(self, nodoRotar):
        hijoDerecho = nodoRotar.right
        huerfanoParcial = hijoDerecho.left
        hijoDerecho.left = nodoRotar
        nodoRotar.right = huerfanoParcial
        nodoRotar.height = 1 + max(self.getHeight(nodoRotar.left),
                           self.getHeight(nodoRotar.right))
        hijoDerecho.height = 1 + max(self.getHeight(hijoDerecho.left),
                           self.getHeight(hijoDerecho.right))
        return hijoDerecho

    def rightRotate(self, nodoRotar):
        hijoIzquierdo = nodoRotar.left
        huerfanoParcial = hijoIzquierdo.right
        hijoIzquierdo.right = nodoRotar
        nodoRotar.left = huerfanoParcial
        nodoRotar.height = 1 + max(self.getHeight(nodoRotar.left),
                           self.getHeight(nodoRotar.right))
        hijoIzquierdo.height = 1 + max(self.getHeight(hijoIzquierdo.left),
                           self.getHeight(hijoIzquierdo.right))
        return hijoIzquierdo

    def getHeight(self, root):
        if not root:
            return 0
        return root.height

    def getBalance(self, root):
        if not root:
            return 0
        return self.getHeight(root.left) - self.getHeight(root.right)

    def minValueNode(self, node):
        current = node

        while (current.left is not None):
            current = current.left

        return current

    def maxValueNode(self, node):
        current = node

        while (current.right is not None):
            current = current.right

        return current

    def getMax(self,root):
        return self.maxValueNode(root).key

    def getMin(self,root):
        return self.minValueNode(root).key

    def _searchHelper(self, curNode, value):
        if value < curNode.key:
            if curNode.left:
                return self._searchHelper(curNode.left, value)
            else:
                return None
        elif value > curNode.key:
            if curNode.right:
                return self._searchHelper(curNode.right, value)
            else:
                return None
        else:
            return curNode

    def search(self, root, value):
        if not root:
            return None
        return self._searchHelper(root, value)


    def printHelper(self, currPtr, indent, last):
        if currPtr != None:
            sys.stdout.write(indent)
            if last:
                sys.stdout.write("R----")
                indent += "     "
            else:
                sys.stdout.write("L----")
                indent += "|    "
            print(currPtr.key)
            self.printHelper(currPtr.left, indent, False)
            self.printHelper(currPtr.right, indent, True)

    def print_tree(self, root):
        self.__print_helper(root, "", True)