$simport$s sys
$d $d

$sclass$s Node():
    $sdef$s $d__init__$d(self$s,$s item):
        $fself$f.item = item
        $fself$f.parent = $sNone$s
        $fself$f.left = $sNone$s
        $fself$f.right = $sNone$s
        $fself$f.color = $u1$u
$d $d

$sclass$s RedBlackTree():
    $sdef$s $d__init__$d($fself$f):
        $fself$f.TNULL = Node($u0$u)
        $fself$f.TNULL.color = $u0$u
        $fself$f.TNULL.left = $sNone$s
        $fself$f.TNULL.right = $sNone$s
        $fself$f.root = $fself$f.TNULL
    $d $d

   $sdef$s $dsearch_tree_helper$d($fself$f$s,$s node$s,$s key):
        $sif$s node == $fself$f.TNULL $sor$s key == node.item:
            $sreturn$s node

        $sif$s key < node.item:
            $sreturn$s $fself$f.search_tree_helper(node.left$s,$s key)
        $sreturn$s $fself$f.search_tree_helper(node.right$s,$s key)
    $d $d

    $sdef$s $ddelete_fix$d($fself$f$s,$s x):
        $swhile$s x != $fself$f.root $sand$s x.color == $u0$u:
            $sif$s x == x.parent.left:
                s = x.parent.right
                $sif$s s.color == $u1$u:
                    s.color = $u0$u
                    x.parent.color = $u1$u
                    $fself$f.left_rotate(x.parent)
                    s = x.parent.right

                $sif$s s.left.color == $u0$u $sand$s s.right.color == $u0$u:
                    s.color = $u1$u
                    x = x.parent
                $selse$s:
                    $sif$s s.right.color == $u0$u:
                        s.left.color = $u0$u
                        s.color = $u1$u
                        $fself$f.right_rotate(s)
                        s = x.parent.right

                    s.color = x.parent.color
                    x.parent.color = $u0$u
                    s.right.color = $u0$u
                    $fself$f.left_rotate(x.parent)
                    x = self.root
            $selse$s:
                s = x.parent.left
                $sif$s s.color == $u1$u:
                    s.color = $u0$u
                    x.parent.color = $u1$u
                    $fself$f.right_rotate(x.parent)
                    s = x.parent.left

                $sif$s s.right.color == $u0$u $sand$s s.right.color == $u0$u:
                    s.color = $u1$u
                    x = x.parent
                $selse$s:
                    $sif$s s.left.color == $u0$u:
                        s.right.color = $u0$u
                        s.color = $u1$u
                        $fself$f.left_rotate(s)
                        s = x.parent.left

                    s.color = x.parent.color
                    x.parent.color = $u0$u
                    s.left.color = $u0$u
                    $fself$f.right_rotate(x.parent)
                    x = $fself$f.root
        x.color = $u0$u
    $d $d

    $sdef$s $d__rb_transplant$d($fself$f$s,$s u$s,$s v):
        $sif$s u.parent == $sNone$s:
            $fself$f.root = v
        $selif$s u == u.parent.left:
            u.parent.left = v
        $selse$s:
            u.parent.right = v
        v.parent = u.parent
    $d $d

    $sdef$s $ddelete_node_helper$d($fself$f$s,$s node$s,$s key):
        z = $fself$f.TNULL
        $swhile$s node != self.TNULL:
            $sif$s node.item == key:
                z = node

            $sif$s node.item <= key:
                node = node.right
            $selse$s:
                node = node.left

        $sif$s z == self.TNULL:
            $fprint$f($c"Cannot find key in the tree"$c)
            $sreturn$s

        y = z
        y_original_color = y.color
        $sif$s z.left == $fself$f.TNULL:
            x = z.right
            $fself$f.__rb_transplant(z$s,$s z.right)
        $selif$s (z.right == $fself$f.TNULL):
            x = z.left
            $fself$f.__rb_transplant(z$s,$s z.left)
        $selse$s:
            y = $fself$f.minimum(z.right)
            y_original_color = y.color
            x = y.right
            $sif$s y.parent == z:
                x.parent = y
            $selse$s:
                $fself$f.__rb_transplant(y$s,$s y.right)
                y.right = z.right
                y.right.parent = y

            $fself$f.__rb_transplant(z$s,$s y)
            y.left = z.left
            y.left.parent = y
            y.color = z.color
        $sif$s y_original_color == $u0$u:
            $fself$f.delete_fix(x)
    $d $d

    $sdef$s $dfix_insert$d(self$s,$s k):
        $swhile$s k.parent.color == $u1$u:
            $sif$s k.parent == k.parent.parent.right:
                u = k.parent.parent.left
                $sif$s u.color == $u1$u:
                    u.color = $u0$u
                    k.parent.color = $u0$u
                    k.parent.parent.color = $u1$u
                    k = k.parent.parent
                $selse$s:
                    $sif$s k == k.parent.left:
                        k = k.parent
                        $fself$f.right_rotate(k)
                    k.parent.color = $u0$u
                    k.parent.parent.color = $u1$u
                    $fself$f.left_rotate(k.parent.parent)
            $selse$s:
                u = k.parent.parent.right

                $sif$s u.color == $u1$u:
                    u.color = $u0$u
                    k.parent.color = $u0$u
                    k.parent.parent.color = $u1$u
                    k = k.parent.parent
                $selse$s:
                    $sif$s k == k.parent.right:
                        k = k.parent
                        $fself$f.left_rotate(k)
                    k.parent.color = $u0$u
                    k.parent.parent.color = $u1$u
                    $fself$f.right_rotate(k.parent.parent)
            $sif$s k == $fself$f.root:
                $sbreak$s
        $fself$f.root.color = $u0$u
    $d $d

    $sdef$s $d__print_helper$d($fself$f$s,$s node$s,$s indent$s,$s last):
        $sif$s node != $fself$f.TNULL:
            sys.stdout.write(indent)
            $sif$s last:
                sys.stdout.write($c"R----"$c)
                indent += $c"     "$c
            $selse$s:
                sys.stdout.write($c"L----"$c)
                indent += $c"|    "$c

            s_color = $c"RED"$c $sif$s node.color == $u1$u $selse$s $c"BLACK"$c
            $fprint$f($fstr$f(node.item) + $c"("$c + s_color + $c")")$c
            $fself$f.__print_helper(node.left$s,$s indent$s,$s $sFalse$s)
            $fself$f.__print_helper(node.right$s,$s indent$s,$s $sTrue$s)
    $d $d

    $sdef$s $dsearchTree$d($fself$f$s,$s k):
        $sreturn$s $fself$f.search_tree_helper($fself$f.root$s,$s k)
    $d $d

    $sdef$s $dminimum$d($fself$f$s,$s node):
        $swhile$s node.left != $fself$f.TNULL:
            node = node.left
        $sreturn$s node
    $d $d

    $sdef$s $dmaximum$d($fself$f$s,$s node):
        $swhile$s node.right != $fself$f.TNULL:
            node = node.right
        $sreturn$s node
    $d $d

    $sdef$s $dsuccessor$d($fself$f$s,$s x):
        $sif$s x.right != $fself$f.TNULL:
            $sreturn$s $fself$f.minimum(x.right)

        y = x.parent
        $swhile$s y != $fself$f.TNULL $sand$s x == y.right:
            x = y
            y = y.parent
        $sreturn$s y
    $d $d

    $sdef$s $dpredecessor$d($fself$f$s,$s  x):
        $sif$s (x.left != $fself$f.TNULL):
            $sreturn$s $fself$f.maximum(x.left)

        y = x.parent
        $swhile$s y != $fself$f.TNULL $sand$s x == y.left:
            x = y
            y = y.parent

        $sreturn$s y
    $d $d

    $sdef$s $dleft_rotate$d($fself$f$s,$s x):
        y = x.right
        x.right = y.left
        $sif$s y.left != $fself$f.TNULL:
            y.left.parent = x

        y.parent = x.parent
        $sif$s x.parent == $sNone$s:
            $fself$f.root = y
        $selif$s x == x.parent.left:
            x.parent.left = y
        $selse$s:
            x.parent.right = y
        y.left = x
        x.parent = y
    $d $d

    $sdef$s $dright_rotate$d($fself$f$s,$s x):
        y = x.left
        x.left = y.right
        $sif$s y.right != $fself$f.TNULL:
            y.right.parent = x

        y.parent = x.parent
        $sif$s x.parent == $sNone$s:
            $fself$f.root = y
        $selif$s x == x.parent.right:
            x.parent.right = y
        $selse$s:
            x.parent.left = y
        y.right = x
        x.parent = y
    $d $d

    $sdef$s $dinsert$d($fself$f$s,$s key):
        node = Node(key)
        node.parent = $sNone$s
        node.item = key
        node.left = $fself$f.TNULL
        node.right = $fself$f.TNULL
        node.color = $u1$u

        y = $sNone$s
        x = $fself$f.root

        $swhile$s x != $fself$f.TNULL:
            y = x
            $sif$s node.item < x.item:
                x = x.left
            $selse$s:
                x = x.right

        node.parent = y
        $sif$s y == $sNone$s:
            $fself$f.root = node
        $selif$s node.item < y.item:
            y.left = node
        $selse$s:
            y.right = node

        $sif$s node.parent == $sNone$s:
            node.color = $u0$u
            $sreturn$s

        $sif$s node.parent.parent == $sNone$s:
            $sreturn$s

        $fself$f.fix_insert(node)
    $d $d

    $sdef$s $dget_root$d($fself$f):
        $sreturn$s self.root
    $d $d

    $sdef$s $ddelete_node$d($fself$f$s,$s item):
        $fself$f.delete_node_helper($fself$f.root$s,$s item)
    $d $d

    $sdef$s $dprint_tree$d($fself$f):
        $fself$f.__print_helper($fself$f.root$s,$s $c""$c$s,$s $sTrue$s)
    $d $d
